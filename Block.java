package indicium_blockChain;

import java.util.*;


public class Block {

	public String hash; //contains blocks current hash
	public String prevHash; //reference to previous block's hash
	public String merkleRoot;
	public ArrayList<Transactions> transactions = new ArrayList<Transactions>(); 
	private String data; //data contained within block
	private long timeStamp; //time of block's creation
	private int nonce; //nonce value (generated by miners)


	public Block(String previousHash) {
		prevHash = previousHash;
		timeStamp = new Date().getTime();
		hash = calculateHash();
	}

	/**Applies the applySHA256 method to calculate the current block's hash based on the previous block's hash, the current block's data and the time stamp
	 * @return A String representation of the block's hash.
	 * */
	public String calculateHash() {
		String calculatedHash = StringUtil.applySHA256(
				prevHash + 
				data + 
				Long.toString(timeStamp) + 
				Integer.toString(nonce) +
				merkleRoot);
		return calculatedHash;
	}

	/** Mines a block, which ensures that Proof-of-Work was performed and that every block is valid and untampered.
	 * @param difficulty - The difficulty of the network i.e. how many 0s each block needs to start with. 
	 * @return Adds the block to the blockchain and prints out its hash.
	 * */
	public void mineBlock(int difficulty) {
		merkleRoot = StringUtil.getMerkleRoot(transactions);
		String target = new String(new char[difficulty]).replace('\0', '0');

		while(!(hash.substring(0, difficulty).equals(target))) {
			nonce++;
			hash = calculateHash();
		}
		System.out.println("Block has been mined: " + hash);
	}

	/** Adds a transaction to an unverified block.
	 * @param transaction - The transaction which is being added to the block from the Mempool.
	 * @return True if the transaction has been successfully added to a block, False if there was a discrepancy. 
	 * */
	public boolean addTransaction(Transactions transaction) {
		if(transaction == null) {
			return false;
		}
		if(prevHash != "0") {
			if(transaction.processTransaction() != true) {
				System.out.println("Transaction failed to process. Voided. ");
				return false;
			}
		}
		transactions.add(transaction);
		System.out.println("Transaction has been added to a block. ");
		return true;
	}
}
